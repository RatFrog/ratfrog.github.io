(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{461:function(e,n,o){"use strict";o.r(n);var r=o(18),c=Object(r.a)({},(function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"centos-docker-安装"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#centos-docker-安装"}},[e._v("#")]),e._v(" CentOS Docker 安装")]),e._v(" "),o("p",[e._v("Docker 支持以下的 64 位 CentOS 版本：\nCentOS 7\nCentOS 8\n更高版本...")]),e._v(" "),o("h2",{attrs:{id:"使用官方安装脚本自动安装"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#使用官方安装脚本自动安装"}},[e._v("#")]),e._v(" 使用官方安装脚本自动安装")]),e._v(" "),o("p",[e._v("安装命令如下：\ncurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n也可以使用国内 daocloud 一键安装命令：\ncurl -sSL https://get.daocloud.io/docker | sh")]),e._v(" "),o("h2",{attrs:{id:"手动安装"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#手动安装"}},[e._v("#")]),e._v(" 手动安装")]),e._v(" "),o("p",[e._v("卸载旧版本\n较旧的 Docker 版本称为 docker 或 docker-engine 。如果已安装这些程序，请卸载它们以及相关的依赖项。\n$ sudo yum remove docker "),o("br"),e._v("\ndocker-client "),o("br"),e._v("\ndocker-client-latest "),o("br"),e._v("\ndocker-common "),o("br"),e._v("\ndocker-latest "),o("br"),e._v("\ndocker-latest-logrotate "),o("br"),e._v("\ndocker-logrotate "),o("br"),e._v("\ndocker-engine\n安装 Docker Engine-Community\n使用 Docker 仓库进行安装\n在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。\n设置仓库\n安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。\n$ sudo yum install -y yum-utils "),o("br"),e._v("\ndevice-mapper-persistent-data "),o("br"),e._v("\nlvm2\n使用以下命令来设置稳定的仓库。\n使用官方源地址（比较慢）\n$ sudo yum-config-manager "),o("br"),e._v("\n--add-repo "),o("br"),e._v("\nhttps://download.docker.com/linux/centos/docker-ce.repo\n可以选择国内的一些源地址：\n阿里云\n$ sudo yum-config-manager "),o("br"),e._v("\n--add-repo "),o("br"),e._v("\nhttp://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n清华大学源\n$ sudo yum-config-manager "),o("br"),e._v("\n--add-repo "),o("br"),e._v("\nhttps://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo\n安装 Docker Engine-Community\n安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本：")]),e._v(" "),o("p",[e._v("$ sudo yum install docker-ce docker-ce-cli containerd.io\n如果提示您接受 GPG 密钥，请选是。\n有多个 Docker 仓库吗？\n如果启用了多个 Docker 仓库，则在未在 yum install 或 yum update 命令中指定版本的情况下，进行的安装或更新将始终安装最高版本，这可能不适合您的稳定性需求。\nDocker 安装完默认未启动。并且已经创建好 docker 用户组，但该用户组下没有用户。\n要安装特定版本的 Docker Engine-Community，请在存储库中列出可用版本，然后选择并安装：\n1、列出并排序您存储库中可用的版本。此示例按版本号（从高到低）对结果进行排序。\n$ yum list docker-ce --showduplicates | sort -r\ndocker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable\ndocker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable\ndocker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable\ndocker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable\n2、通过其完整的软件包名称安装特定版本，该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。例如：docker-ce-18.09.1。\n$ sudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io\n启动 Docker。\n$ sudo systemctl start docker\n通过运行 hello-world 映像来验证是否正确安装了 Docker Engine-Community 。\n$ sudo docker run hello-world")]),e._v(" "),o("h1",{attrs:{id:"docker-hello-world"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docker-hello-world"}},[e._v("#")]),e._v(" Docker Hello World")]),e._v(" "),o("p",[e._v('Docker 允许你在容器内运行应用程序， 使用 docker run 命令来在容器内运行一个应用程序。\n输出Hello world\nrunoob@runoob:~$ docker run ubuntu:15.10 /bin/echo "Hello world"\nHello world\n各个参数解析：\ndocker: Docker 的二进制执行文件。\nrun: 与前面的 docker 组合来运行一个容器。\nubuntu:15.10 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。\n/bin/echo "Hello world": 在启动的容器里执行的命令\n以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo "Hello world"，然后输出结果。')]),e._v(" "),o("h2",{attrs:{id:"运行交互式的容器"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#运行交互式的容器"}},[e._v("#")]),e._v(" 运行交互式的容器")]),e._v(" "),o("p",[e._v('我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现"对话"的能力：\nrunoob@runoob:~$ docker run -i -t ubuntu:15.10 /bin/bash\nroot@0123ce188bd8:/#\n各个参数解析：\n-t: 在新容器内指定一个伪终端或终端。\n-i: 允许你对容器内的标准输入 (STDIN) 进行交互。\n注意第二行 root@0123ce188bd8:/#，此时我们已进入一个 ubuntu15.10 系统的容器\n我们尝试在容器中运行命令 cat /proc/version和ls分别查看当前系统的版本信息和当前目录下的文件列表\nroot@0123ce188bd8:/#  cat /proc/version\nLinux version 4.4.0-151-generic (buildd@lgw01-amd64-043) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10) ) #178-Ubuntu SMP Tue Jun 11 08:30:22 UTC 2019\nroot@0123ce188bd8:/# ls\nbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\nroot@0123ce188bd8:/#\n我们可以通过运行 exit 命令或者使用 CTRL+D 来退出容器。\nroot@0123ce188bd8:/#  exit\nexit\nroot@runoob:~#\n注意第三行中 root@runoob:~# 表明我们已经退出了当期的容器，返回到当前的主机中。')]),e._v(" "),o("h2",{attrs:{id:"启动容器-后台模式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#启动容器-后台模式"}},[e._v("#")]),e._v(" 启动容器（后台模式）")]),e._v(" "),o("p",[e._v('使用以下命令创建一个以进程方式运行的容器\nrunoob@runoob:~$ docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"\n2b1b7a428627c51ab8810d541d759f072b4fc75487eed05812646b8534a2fe63\n在输出中，我们没有看到期望的 "hello world"，而是一串长字符\n2b1b7a428627c51ab8810d541d759f072b4fc75487eed05812646b8534a2fe63\n这个长字符串叫做容器 ID，对每个容器来说都是唯一的，我们可以通过容器 ID 来查看对应的容器发生了什么。\n首先，我们需要确认容器有在运行，可以通过 docker ps 来查看：\nrunoob@runoob:~$ docker ps\nCONTAINER ID        IMAGE                  COMMAND              ...'),o("br"),e._v('\n5917eac21c36        ubuntu:15.10           "/bin/sh -c \'while t…"    ...\n输出详情介绍：\nCONTAINER ID: 容器 ID。\nIMAGE: 使用的镜像。\nCOMMAND: 启动容器时运行的命令。\nCREATED: 容器的创建时间。\nSTATUS: 容器状态。\n状态有7种：\ncreated（已创建）\nrestarting（重启中）\nrunning（运行中）\nremoving（迁移中）\npaused（暂停）\nexited（停止）\ndead（死亡）\nPORTS: 容器的端口信息和使用的连接类型（tcp\\udp）。\nNAMES: 自动分配的容器名称。\n在宿主主机内使用 docker logs 命令，查看容器内的标准输出：\nrunoob@runoob:~$ docker logs 2b1b7a428627\nrunoob@runoob:~$ docker logs amazing_cori')]),e._v(" "),o("h2",{attrs:{id:"停止容器"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#停止容器"}},[e._v("#")]),e._v(" 停止容器")]),e._v(" "),o("p",[e._v("我们使用 docker stop 命令来停止容器:\n通过 docker ps 查看，容器已经停止工作:\nrunoob@runoob:~$ docker ps\n可以看到容器已经不在了。\n也可以用下面的命令来停止:\nrunoob@runoob:~$ docker stop amazing_cori")])])}),[],!1,null,null,null);n.default=c.exports}}]);