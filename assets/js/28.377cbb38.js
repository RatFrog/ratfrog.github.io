(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{431:function(e,n,s){"use strict";s.r(n);var t=s(18),a=Object(t.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("TOC"),e._v(" "),s("h2",{attrs:{id:"oracle的日期时间范围查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oracle的日期时间范围查询"}},[e._v("#")]),e._v(" Oracle的日期时间范围查询")]),e._v(" "),s("p",[e._v("AND A.CREATETIME between to_date('2020-04-10','yyyy-MM-dd') AND to_date('2020-04-13','yyyy-MM-dd');")]),e._v(" "),s("h2",{attrs:{id:"oracle语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oracle语句"}},[e._v("#")]),e._v(" oracle语句")]),e._v(" "),s("blockquote",[s("p",[e._v("查询最近七天内在数据")])]),e._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("select")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("table")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("where")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("datetime")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" to_char"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("sysdate"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'yyyymmdd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),s("blockquote",[s("p",[e._v("修改oracle有数据的字段类型")])]),e._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("-- 修改字段类型")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("alter")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("table")]),e._v(" BANKLIST "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("rename")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("column")]),e._v(" BANKCODE "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("to")]),e._v(" BANKCODEBAK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("alter")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("table")]),e._v(" BANKLIST "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("add")]),e._v(" BANKCODE VARCHAR2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("50")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("update")]),e._v(" BANKLIST "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("set")]),e._v(" BANKCODE"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("trim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("BANKCODEBAK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("alter")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("table")]),e._v(" BANKLIST "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("drop")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("column")]),e._v(" BANKCODEBAK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COMMENT")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ON")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("COLUMN")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"BANKLIST"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("BANKCODE "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("IS")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'管辖'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),s("h2",{attrs:{id:"oracle查看被锁的表及解除锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oracle查看被锁的表及解除锁"}},[e._v("#")]),e._v(" oracle查看被锁的表及解除锁")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("查询哪些对象被锁\n\nselect object_name, machine, s.sid, s.serial#\nfrom v$locked_object l, dba_objects o, v$session s\nwhere l.object_id　 = 　o.object_id\nand l.session_id = s.sid;\n \n下面的语句用来杀死一个进程：\n\nalter system kill session '24,111'; --(其中24,111分别是上面查询出的sid,serial#)\n\n获得进程(线程)号\n\nselect spid, osuser, s.PROGRAM\nfrom v$session s, v$process p\nwhere s.PADDR = p.ADDR\nand s.SID = '425';\n \n杀进程\n\nkill - 9 26099 --查询出的spid\n\n")])])]),s("h2",{attrs:{id:"oracle-分页查询数据重复问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oracle-分页查询数据重复问题"}},[e._v("#")]),e._v(" oracle 分页查询数据重复问题")]),e._v(" "),s("p",[e._v("oracle 分页查询数据的时候必须要有排序；\n排序的字段必须返回必须是唯一的，比如主键，或者添加多个排序。\n"),s("code",[e._v("ORDER BY ID;")])]),e._v(" "),s("h2",{attrs:{id:"oracle中序列-sequence-详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oracle中序列-sequence-详解"}},[e._v("#")]),e._v(" Oracle中序列（Sequence）详解")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("一 序列定义\n\n \n\n序列(SEQUENCE)是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。不占用磁盘空间，占用内存。\n\n其主要用途是生成表的主键值，可以在插入语句中引用，也可以通过查询检查当前值，或使序列增至下一个值。\n\n \n\n二 创建序列\n\n \n\n创建序列需要CREATE SEQUENCE系统权限。序列的创建语法如下：\n\n　　CREATE SEQUENCE 序列名\n\n　　[INCREMENT BY n]\n\n　　[START WITH n]\n\n　　[{MAXVALUE/ MINVALUE n| NOMAXVALUE}]\n\n　　[{CYCLE|NOCYCLE}]\n\n　　[{CACHE n| NOCACHE}];\n\n    其中：\n\n1)  INCREMENT BY用于定义序列的步长，如果省略，则默认为1，如果出现负值，则代表Oracle序列的值是按照此步长递减的。\n\n2)  START WITH 定义序列的初始值(即产生的第一个值)，默认为1。\n\n3)  MAXVALUE 定义序列生成器能产生的最大值。选项NOMAXVALUE是默认选项，代表没有最大值定义，这时对于递增Oracle序列，系统能够产生的最大值是10的27次方;对于递减序列，最大值是-1。\n\n4)  MINVALUE定义序列生成器能产生的最小值。选项NOMAXVALUE是默认选项，代表没有最小值定义，这时对于递减序列，系统能够产生的最小值是?10的26次方;对于递增序列，最小值是1。\n\n5)  CYCLE和NOCYCLE 表示当序列生成器的值达到限制值后是否循环。CYCLE代表循环，NOCYCLE代表不循环。如果循环，则当递增序列达到最大值时，循环到最小值;对于递减序列达到最小值时，循环到最大值。如果不循环，达到限制值后，继续产生新值就会发生错误。\n\n6)  CACHE(缓冲)定义存放序列的内存块的大小，默认为20。NOCACHE表示不对序列进行内存缓冲。对序列进行内存缓冲，可以改善序列的性能。\n\n大量语句发生请求，申请序列时，为了避免序列在运用层实现序列而引起的性能瓶颈。Oracle序列允许将序列提前生成 cache x个先存入内存，在发生大量申请序列语句时，可直接到运行最快的内存中去得到序列。但cache个数也不能设置太大，因为在数据库重启时，会清空内存信息，预存在内存中的序列会丢失，当数据库再次启动后，序列从上次内存中最大的序列号+1 开始存入cache x个。这种情况也能会在数据库关闭时也会导致序号不连续。\n\n7)  NEXTVAL 返回序列中下一个有效的值，任何用户都可以引用。\n\n8)  CURRVAL 中存放序列的当前值,NEXTVAL 应在 CURRVAL 之前指定 ，二者应同时有效。\n\n \n\n例子：\n\n复制代码\nSQL> create sequence t1_seq increment by 1 start with 1;\n\nSYS@orclasm > drop sequence t1_seq;\n\n\nSequence dropped.\n\n\nSYS@orclasm > create sequence t1_seq increment by -1 start with  -5;\n\n\nSequence created.\n\n\nSYS@orclasm > select t1_seq.currval,t1_seq.nextval from dual;\n\n\n   CURRVAL    NEXTVAL\n---------- ----------\n        -5         -5\n\n\nSYS@orclasm > select t1_seq.currval,t1_seq.nextval from dual;\n\n\n   CURRVAL    NEXTVAL\n---------- ----------\n        -6         -6\n\n\nSYS@orclasm > select t1_seq.currval,t1_seq.nextval from dual;\n\n\n   CURRVAL    NEXTVAL\n---------- ----------\n        -7         -7\n复制代码\n \n\n \n\n三 使用序列\n\n \n\n调用NEXTVAL将生成序列中的下一个序列号，调用时要指出序列名，即用以下方式调用: 序\n\n列名.NEXTVAL\n\nCURRVAL用于产生序列的当前值，无论调用多少次都不会产生序列的下一个值。如果序列还\n\n没有通过调用NEXTVAL产生过序列的下一个值，先引用CURRVAL没有意义。调用CURRVAL\n\n的方法同上，要指出序列名，即用以下方式调用:序列名.CURRVAL\n\n复制代码\nSQL> create table t1(id number,qq number,ww number);\n\nSQL> insert into t1 values(t1_seq.nextval,1,1);\n\n1 row created.\n\nSQL> /\n\n1 row created.\n\nSQL> /\n\n \n\nSQL> /\n\nSQL> /\n\n1 row created.\n\n \n\nSQL> select * from t1;\n\n \n\n        ID         QQ         WW\n\n----------     ----------     ----------\n\n         1          1          1\n\n         2          1          1\n\n         3          1          1\n\n         4          1          1\n\n         5          1          1\n\n \n\nSQL> select t1_seq.currval from dual;\n\n \n\n   CURRVAL\n\n----------\n\n         5\n\n \n\nSQL> select t1_seq.nextval from dual;\n\n \n\n   NEXTVAL\n\n----------\n\n         6\n\n \n\nSQL> select t1_seq.nextval from dual;\n\n \n\n   NEXTVAL\n\n----------\n\n         7\n复制代码\n \n\n \n\n \n\n四 修改序列\n\n \n\n修改序列的注意事项：\n\n1  必须是序列的拥有者或对序列有 ALTER any sequence权限\n\n2  只有将来的序列值会被改变\n\n3  改变序列的初始值只能通过删除序列之后重建序列的方法实现\n\n \n\nAlter sequence示例：\n\nALTER SEQUENCE emp_sequence INCREMENT BY 10 MAXVALUE 10000 CYCLE -- 到10000后从头开始 NOCACHE ;\n \n\n 可以影响Sequence的初始化参数：\n\n SEQUENCE_CACHE_ENTRIES =设置能同时被cache的sequence数目。\n\n复制代码\nSQL> alter sequence t1_seq increment by 2 maxvalue 10 cycle;\n\nalter sequence t1_seq increment by 2 maxvalue 10 cycle\n\n*\n\nERROR at line 1:\n\nORA-04013: number to CACHE must be less than one cycle\n\n \n\nSQL> alter sequence t1_seq increment by 2 maxvalue 40 cycle;\n\nSequence altered.\n\n \n\nSQL> insert into t1 values(t1_seq.nextval,1,1);\n\n/\n\n/\n\n……….\n\n/\n\nSQL> select * from t1;\n\n        ID         QQ         WW\n\n----------     ----------     ----------\n\n         1          1          1\n\n         2          1          1\n\n         3          1          1\n\n         4          1          1\n\n         5          1          1\n\n         9          1          1\n\n        11          1          1\n\n        13          1          1\n\n        15          1          1\n\n        17          1          1\n\n       ………………………………………………..\n\n        37          1          1\n\n        39          1          1\n\n         1          1          1\n\n         3          1          1\n\n         5          1          1\n\n \n\n24 rows selected.\n复制代码\n \n\n \n\n \n\n五 查询序列\n\n \n\n1  通过数据字典USER_OBJECTS可以查看用户拥有的序列。\n\n2  通过数据字典USER_SEQUENCES可以查看序列的设置。\n\n　　例：查看用户的序列：\n\nSELECT SEQUENCE_NAME,MIN_VALUE,MAX_VALUE,INCREMENT_BY,LAST_NUMBER FROM USER_SEQUENCES;\n \n\n　　执行结果：\n\n　　\n\nSEQUENCE_NAME MIN_VALUE MAX_VALUE INCREMENT_BY LAST_NUMBER\n\n \n \n\n复制代码\nSQL> select object_name,object_type from user_objects;\n\n \n\nOBJECT_NAM   OBJECT_TYPE\n\n----------        -------------------\n\nT1_SEQ        SEQUENCE\n\nT1            TABLE\n\n \n\nSQL> select sequence_name,increment_by,cycle_flag,cache_size from user_sequences;\n\nSEQUENCE_N  INCREMENT_BY  CYCLE_FLAG   CACHE_SIZE\n\n----------         ------------       ----------       ----------\n\nT1_SEQ            2             Y            20\n复制代码\n \n\n \n\n六 删除序列\n\n \n\nSQL> drop sequence t1_seq;\n \n\n \n\n \n\n\n序列作为主键使用的原理、优缺点讨论 \n\n这几天和同事一直在讨论关于表设计中主键选择的问题，用sequence作为主键究竟有什么好处，又有什么缺点，尤其是有些事务场景上下文需要用到创建的序列值，如何用？其实我想说的是，可能只是一个很简单的概念，可能深入理解，还是有很多未知的知识，当然也就可能会有一些容易忽略但又可能很关键的坑，只有碰了才知道。。。\n以下是总结摘要，如有疏漏，还请过路的各位大侠赐教。\n\n \n\n \n1、首先说下seq.nextval主要有以下两种使用场景：\n(1). 如果一个事务中只是INSERT时需要序列，其他地方不会需要这个序列，那么只需要在INSERT ... VALUES (seq.nextval ...)语句中使用即可。\n(2). 如果一个事务中INSERT一张表后，还需要插入时的主键ID值，作为外键插入其他表，那么就需要在INSERT第一张表前使用select seq.nextval from dual提前获取可用的ID保存到一个变量中，为后面使用。\n\n2、其次可以简单说下调用序列的原理，只有理解了序列的原理，才能有助于我们知道如何正确使用序列。\n使用序列时Oracle内部大体是按照如下步骤进行：\n(1). 一个序列会被定义到Oracle内部的一张数据字典表(seq$)的一行。\n(2). 第一次使用序列，序列的起始值会加上缓存大小，然后更新回行。\n(3). Oracle内部会自动跟踪内存中的两个值，当前值和目标值。\n(4). 每次有回话调用seq.nextval，Oracle会递增当前值，然后检查是否超过了目标值，再返回结果。\n(5). 如果当前值和目标值相同，Oracle会更新数据字典表中的行，为目标值加上缓存大小，同时内存中产生了一个新的目标值。\n例如create sequence seq cache 20;这样一序列。名称为seq的序列，缓存大小是20，默认初始值是1，步长默认是1。\n\n当使用了一次seq.nextval后，可以看HIGHWATER字段值为21，即目标值1+缓存大小20=21。\n\n当执行20次后，seq.nextval值变为21，此时HIGHWATER字段值是41，即目标值21+缓存大小20=41。\n\n也就是每调用seq.nextval值20次，会更新一次seq$表，那么问题来了，如果cache值较小，且序列使用的频率较高，那么会对seq$表有频繁的更新操作，日志量会增加，尤其在RAC下，更新该行的时候，该数据块会在节点间不停的传送，就会产生可能的争用，这种问题会被放大。因此为了减少这种情况，我们可以将cache缓存值设置大一些，例如1000，减少对字典表的更新。\n序列还有一个问题，就是cache缓存是实例级的，对于RAC，比如第一个节点使用序列时会分配1-20，第二个节点会被分配21-40，Oracle保证不会重复，但若节点crash了，比如节点1坏了，那么序列就会出现断号，节点1再次使用时，只会从41-60，由于我们用主键只为了标示唯一，不关心段号，也不关心产生的顺序，所以这些可以忽略。\n \n注：最近在讨论某系统和一个外系统做全局事务的事情，本想用这个主键作为两系统传输的一部分，用于控制全局事务，且用其作为判断交易先后顺序的依据，这是不太符合要求的，因为是RAC，序列是基于实例级cache，那么如果不能保证某一类型的交易总在一个节点上执行，那么不同次交易产生的主键序列值可能不是递增的，例如节点1处理一次交易，产生序列是1，节点2处理一次交易，产生序列是21，此时节点1再处理一次交易，产生序列是2；除非设置序列为order，但这样在RAC就有可能产生资源争用的问题，因为为了保证多节点间每次产生的序列值是递增的，每次产生就需要多节点间判断当前值后，才能知道下一个值是多少，而且会有额外的锁，保证同一时间只有一个节点在做这个操作，当然究竟是否会产生资源争用，还是要依据实际的业务并发量，或者压力测试才能证明，这里只是说可能会这样的问题，不是一定会，否则Oracle就不会有提供这种order的创建属性，凡事不绝对。\n\n3、结合(1)的场景，\n(1). 如果一个事务中只是INSERT时需要序列，其他地方不会需要这个序列，那么只需要在INSERT ... VALUES (seq.nextval ...)语句中使用即可。\n> 这个场景下，如果序列cache设置为1000，调用100次nextval几乎没有影响。\n(2). 如果一个事务中INSERT一张表后，还需要插入时的主键ID值，作为外键插入其他表，那么就需要在INSERT第一张表前使用select seq.nextval from dual提前获取可用的ID保存到一个变量中，为后面使用。\n> 这个场景，就有些说的了。如果是同一事务中需要用到之前的序列值，那么就需要提前用select seq.nextval from dual保存到变量中，(当然，如果是用PLSQL语句，则可以不用提前保存变量这步，但咱们的应用中不适用，就不多说了)。\n")])])]),s("h2",{attrs:{id:"浅谈oracle归档日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浅谈oracle归档日志"}},[e._v("#")]),e._v(" 浅谈Oracle归档日志")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("什么是归档日志\n归档日志(Archive Log)是非活动的重做日志备份.通过使用归档日志,可以保留所有重做历史记录,当数据库处于ARCHIVELOG模式并进行日志切换式,后台进程ARCH会将重做日志的内容保存到归档日志中.当数据库出现介质失败时,使用数据文件备份,归档日志和重做日志可以完全恢复数据库。\n\n如何开启归档模式\n查询是否开启归档\n[oracle@osc ~]$ sqlplus / as sysdba\n\nSQL*Plus: Release 11.2.0.4.0 Production on Mon Nov 12 17:36:13 2018\n\nCopyright (c) 1982, 2013, Oracle.  All rights reserved.\n\n\nConnected to:\nOracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit Production\nWith the Partitioning, OLAP, Data Mining and Real Application Testing options\n\nSQL> archive log list; \nDatabase log mode              No Archive Mode\nAutomatic archival             Disabled\nArchive destination            USE_DB_RECOVERY_FILE_DEST\nOldest online log sequence     1124\nCurrent log sequence           1126\n由上可见，数据库未开启归档\n\n开启归档模式\nSQL> shutdown immediate;\nDatabase closed.\nDatabase dismounted.\nORACLE instance shut down.\nSQL>  startup mount;\nORACLE instance started.\n\nTotal System Global Area 2421825536 bytes\nFixed Size                  2255632 bytes\nVariable Size             620758256 bytes\nDatabase Buffers         1778384896 bytes\nRedo Buffers               20426752 bytes\nDatabase mounted.\nSQL> alter database archivelog;\n\nDatabase altered.\n\nSQL> alter database open;\n\nDatabase altered.\n再观察归档情况\n\nSQL> archive log list; \nDatabase log mode              Archive Mode\nAutomatic archival             Enabled\nArchive destination            USE_DB_RECOVERY_FILE_DEST\nOldest online log sequence     1124\nNext log sequence to archive   1126\nCurrent log sequence           1126\n归档已经开启\n\n经常会遇到的问题\n错误代码:ORA-00257\n在项目中可能经常会遇到ORA-00257归档写满这种情况,先看一下官方描述：\n\n[oracle@osc ~]$ oerr ORA 00257\n00257, 00000, \"archiver error. Connect internal only, until freed.\"\n// *Cause:  The archiver process received an error while trying to archive\n//       a redo log.  If the problem is not resolved soon, the database\n//       will stop executing transactions. The most likely cause of this\n//       message is the destination device is out of space to store the\n//       redo log file.\n// *Action:  Check archiver trace file for a detailed description\n//        of the problem. Also verify that the\n//       device specified in the initialization parameter\n//       ARCHIVE_LOG_DEST is set up properly for archiving.\n也就是说当空间问题导致归档日志无法继续写入的时候会报错误，当前也只能允许内部链接。\n这种情况下也只能最快速的清理归档日志。\n\n清理归档日志\n[oracle@osc ~]$ rman target /\n\nRecovery Manager: Release 11.2.0.4.0 - Production on Mon Nov 12 17:48:41 2018\n\nCopyright (c) 1982, 2011, Oracle and/or its affiliates.  All rights reserved.\n\nconnected to target database: ORCL (DBID=1511487649)\nRMAN> crosscheck archivelog all; \nRMAN> delete archivelog until time 'sysdate-1';\nRMAN> delete expired archivelog all;\n分别看一下这三句话的意思\n\ncrosscheck archivelog all\n验证的是DB的归档日志即log_archive_dest参数指定位置的文件，当手工删除了归档日志以后，Rman备份会检测到日志缺失，从而无法进一步继续执行。\n所以此时需要手工执行crosscheck过程，之后Rman备份可以恢复正常。\n也就是说当无法进入rman的时候，可以直接删除归档日志文件，然后再执行这条语句！\n\ndelete archivelog until time 'sysdate-1'\n这句话是删除当前时间-1天的归档日志\n\n-3就表示保留3天归档日志\n\ndelete expired archivelog all\n删除过期或无效的归档日志\n强烈建议：在删除归档日志后做一次物理备份\n\n为什么会产生上面的问题\n当归档日志每天都有大量的生成的时候，说明数据库存在了大量DML语句，而归档日志就是记录这些操作,所以我们要考虑能不能避免这些操作，如:\n\n是不是数据库设计不合理，需要不要进行频繁操作\n大量的操作有可能是日志类（日志、操作记录等）的数据，那么是不是考虑把日志表放入非关系数据库中\nDML语句:SQL语言中，负责对数据库对象运行数据访问工作的指令集，以INSERT、UPDATE、DELETE三种指令为核心\n非关系数据库如文档型文数据MongoDB、键值数据库Redis等\n\n<b style=\"color:red\">在了解了归档日志的副作用后，是否觉得不开启归档模式，更省心一些呢？</b>\n下面我们看一看归档模式的优缺点（摘自网络）\n\n归档模式和非归档模式的优缺点\n归档模式的优点\n可以进行完全、不完全恢复：由于对数据库所做的全部改动都记录在日志文件中，如果发生硬盘故 障等导致数据文件丢失的话，则可以利用物理备份和归档日志完全恢复数据库，不会丢失任何数据。\n可以进行联机热备：所谓联机热备，就是在数据库运行状态下，对数据库进行备份。备份时用户对 数据库的使用不受任何影响。\n可以实施 Data Guard：可以部署 1 个或多个备用数据库，从而最大限度地提供灾难保护手段。\n可以实施 Stream：利用 Stream 技术，可以实现最简单的单向复制到复杂的双向复制、多向复制， 提供更加灵活的数据冗余方案。\n表空间可以脱机：可以备份部分数据库，比如重要的表空间。\n能够增量备份：只需做一次完全备份，以后只备份发生改变的数据，可以提高备份速度。\n更多的优化选项：随着 Oracle 版本升级，在联机热备方面不断有新的优化策略出现。\n归档模式的缺点\n需要更多的磁盘空间保存归档日志；\nDBA 会有更多的管理工作，包括维护归档空间、备份归档日志。\n非归档模式的缺点\n只能进行脱机备份，也就是所谓的“ 冷备份”，和联机备份的“ 热备份” 相对应，数据库必须完全 关闭后备份，在备份过程中数据库不可用；\n必须备份整个数据库，不能只备份部分数据库；\n不能增量备份，对于 TB 级数据库（VLDB） ，这是一个非常大的缺点；\n只能部分恢复，如果数据文件丢失需要恢复，DBA 只能恢复最后一次的完全备份，而之后的所有 数据库改变全部丢失。\n非归档模式的优点\nDBA 的管理工作减少，因为非归档模式不产生归档日志，因此 DBA 不用考虑对归档的管理；\n性能会有提升。\n非归档模式不生成归档日志，从数据安全角度来说，这种模式缺点是主要的，而优点可以忽略不计。\n")])])]),s("h2",{attrs:{id:"oracle查看被锁的表和解锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oracle查看被锁的表和解锁"}},[e._v("#")]),e._v(" oracle查看被锁的表和解锁")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("第一步：通过管理员权限用户查询被锁表信息\n　　system kill session “sid,serial#”；或者使用相关操作系统kill进程的命令，如UNIX下kill -9 sid,或者使用其它工具杀掉死锁进程。\n\n　　\n\n复制代码\nselect t2.username,\n       t2.sid,\n       t2.serial#,\n       t3.object_name,\n       t2.OSUSER,\n       t2.MACHINE,\n       t2.PROGRAM,\n       t2.LOGON_TIME,\n       t2.COMMAND,\n       t2.LOCKWAIT,\n       t2.SADDR,\n       t2.PADDR,\n       t2.TADDR,\n       t2.SQL_ADDRESS,\n       t1.LOCKED_MODE\n  from v$locked_object t1, v$session t2, dba_objects t3\n where t1.session_id = t2.sid\n   and t1.object_id = t3.object_id\n order by t2.logon_time;\n复制代码\n上面这条SQL语句用到了Oracle的两个视图和一个表，分别是v$locked_object、v$session、dba_objects： \nv$locked_object 视图中记录了所有session中的所有被锁定的对象信息。 \nv$session 视图记录了所有session的相关信息。 \ndba_objects 为oracle用户对象及系统对象的集合，通过关联这张表能够获取被锁定对象的详细信息。\n\n说明： \nusername：oracle用户名 \nsid：进程号 \nserial#：序列号 \nobject_name：表名 \nosuser：操作系统用户名 \nmachine：机器名 \nprogram：操作工具 \nlogon_time：登陆时间 \nlockwait：表示当前这张表是否正在等待其他用户解锁这张表 \nlocked_mode：锁表模式（下面详细说明）\n\n第二步：通过拥有管理员权限的用户解除数据库中被锁住的表(SID,SERIAL)\n通过第一步查出来的信息找到被锁的表之后执行如下语句解锁该表：\n\nalter system kill session 'sid,seial#';\n1\n注意：sid和seial#就是第一步中查询出来的进程号和序列号。\n\neg：解除第一步中表的锁\n\nalter system kill session '10,15';\n锁的模式\nv$locked_object中的LOCKED_MODE字段表示锁的模式，oracle中锁的模式有如下几种: \n0：none \n1：null 空 \n2：Row-S 行共享(RS)：共享表锁，sub share \n3：Row-X 行独占(RX)：用于行的修改，sub exclusive \n4：Share 共享锁(S)：阻止其他DML操作，share \n5：S/Row-X 共享行独占(SRX)：阻止其他事务操作，share/sub exclusive \n6：exclusive 独占(X)：独立访问使用，exclusive\n\n数字越大锁级别越高, 影响的操作越多。\n\n1级锁有：Select，有时会在v$locked_object出现。 \n2级锁有：Select for update,Lock For Update,Lock Row Share \nselect for update当对话使用for update子串打开一个游标时，所有返回集中的数据行都将处于行级(Row-X)独占式锁定，其他对象只能查询这些数据行，不能进行update、delete或select for update操作。 \n3级锁有：Insert, Update, Delete, Lock Row Exclusive \n没有commit之前插入同样的一条记录会没有反应, 因为后一个3的锁会一直等待上一个3的锁, 我们必须释放掉上一个才能继续工作。 \n4级锁有：Create Index, Lock Share \nlocked_mode为2,3,4不影响DML(insert,delete,update,select)操作, 但DDL(alter,drop等)操作会提示ora-00054错误。 \n00054, 00000, “resource busy and acquire with NOWAIT specified” \n// *Cause: Resource interested is busy. \n// *Action: Retry if necessary. \n5级锁有：Lock Share Row Exclusive \n具体来讲有主外键约束时update / delete … ; 可能会产生4,5的锁。 \n6级锁有：Alter table, Drop table, Drop Index, Truncate table, Lock Exclusive\n\n--以下几个为相关表\nSELECT * FROM v$lock;\nSELECT * FROM v$sqlarea;\nSELECT * FROM v$session;\nSELECT * FROM v$process ;\nSELECT * FROM v$locked_object;\nSELECT * FROM all_objects;\nSELECT * FROM v$session_wait;\n\n--查看被锁的表\nselect b.owner,b.object_name,a.session_id,a.locked_mode from v$locked_object a,dba_objects b where b.object_id = a.object_id;\n\n--查看那个用户那个进程照成死锁\nselect b.username,b.sid,b.serial#,logon_time from v$locked_object a,v$session b where a.session_id = b.sid order by b.logon_time;\n\n--查看连接的进程\nSELECT sid, serial#, username, osuser FROM v$session;\n\n--3.查出锁定表的sid, serial#,os_user_name, machine_name, terminal，锁的type,mode\nSELECT s.sid, s.serial#, s.username, s.schemaname, s.osuser, s.process, s.machine,\ns.terminal, s.logon_time, l.type\nFROM v$session s, v$lock l\nWHERE s.sid = l.sid\nAND s.username IS NOT NULL\nORDER BY sid;\n\n这个语句将查找到数据库中所有的DML语句产生的锁，还可以发现，\n任何DML语句其实产生了两个锁，一个是表锁，一个是行锁。\n\n--杀掉进程 sid,serial#\nalter system kill session'210,11562';\n")])])]),s("h2",{attrs:{id:"oracle-expdp导出导入数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oracle-expdp导出导入数据"}},[e._v("#")]),e._v(" Oracle expdp导出导入数据")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("-- 切换权限\nsu - oracle\n\n-- 导出数据(注意去除日志等无用的表)\nexpdp  root/123456@10.120.82.1/smz directory=exp_dir dumpfile=smz_2207_%U.dmp logfile=smz_2207.log exclude=table:\\\"in \\(\\'ATTENDANCEPUSH\\' ,\\'OPERATELOG\\' ,\\'ZJUPLOADRECORD\\',\\'UPLOADLOG\\' \\)\\\" owner=root compression=data_only parallel=4 cluster=N\n\n-- 进入要导入数据的服务器\nssh 192.168.10.128\n\n-- 切换权限\nsu - oracle\n\n-- 进去oracle命令行\nsqlplus / as sysdba\n\n-- 删除用户\nDROP USER c##root CASCADE;\n\n-- 删除表空间\nDROP TABLESPACE root INCLUDING CONTENTS AND DATAFILES;\n\n-- 创建表空间\ncreate tablespace root\nlogging \ndatafile '/home/oracle/oracledatabase/app/admin/MIGRANTWORK/root.dbf'\nsize 5000m \nautoextend on \nnext 50m \nextent management local;\n\n-- 创建用户，授权\ncreate user c##root identified by 123456 default tablespace root; \n\n-- 用户授予目录权限\ngrant read,write on directory c701 to c##root;\n\n-- 用户授权数据库操作权限\nGRANT CREATE ANY VIEW,DROP ANY VIEW,CONNECT,RESOURCE,CREATE SESSION,DBA TO c##root;\n\n-- 退出sql操作命令\nexit\n\n-- 导入数据(注意磁盘空间是否足够)\nimpdp c##root/123456 directory=c701 dumpfile=smz_2207_01.dmp,smz_2207_02.dmp,smz_2207_03.dmp,smz_2207_04.dmp,smz_2207_05.dmp,smz_2207_06.dmp remap_schema=root:c##root  TRANSFORM=segment_attributes:n;\n\n-- 问题：删除用户时出现ORA-01940: cannot drop a user that is currently connected\n-- 查询是否有用户连接数据库\nselect username,sid,serial#,paddr from v$session where username='C##HNPRD';\nselect saddr,sid,serial#,paddr,username,status from v$session where username is not null;\n-- 关闭这些连接\nalter system kill session '2664,38155';\n-- 删除用户和表空间\nDROP USER c##root CASCADE;\nDROP TABLESPACE root INCLUDING CONTENTS AND DATAFILES;\n\n-- 问题：删除表空间发现磁盘空间没增加\n-- 查看空间发现临时表文件大，怀疑被缓存，重启解决\ndu -h --max-depth=1 /home/oracle/oracledatabase\n-- 重启oracle\nsqlplus / as sysdba\nshutdown immediate\nstartup\n\n-- 问题：导入数据提示找不到文件\n-- 将文件放到提示中的目录即可 mv /dmp/* /home/oracle/dump/\nimpdp c##hnprd/E2r201800 directory=c701 dumpfile=smz_a20200720_01.dmp,smz_a20200720_02.dmp,smz_a20200720_03.dmp,smz_a20200720_04.dmp,smz_a20200720_05.dmp,smz_a20200720_06.dmp remap_schema=hnprd:c##hnprd  TRANSFORM=segment_attributes:n;\n\n-- 问题：磁盘空间被占用满\n-- 归档日志目录\n/home/oracle/oracledatabase/app/product/11.2.0/dbhome_1/dbs\n-- 删除归档日志\ncd /home/oracle/oracledatabase/app/product/11.2.0/dbhome_1/dbs \nrm -rf arch1_26* \n\n-- 脚本：定时删除归档日志\n#/bin/bash\ncd /home/oracle/oracledatabase/app/product/11.2.0/dbhome_1/dbs\nfind ./ -mtime +1 -name \"arch1_*.dbf\" -exec rm -rf {} \\;\n\n-- 错误：xshell窗口挂了，导致导入数据库终止\n-- 使用screen挂在后台\nyun install screen\nscreen -R oracle(关闭xshell后重新执行该命令则可进入挂起的后台)\n执行导入命令\n")])])]),s("h2",{attrs:{id:"oracle-expdp导出数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oracle-expdp导出数据"}},[e._v("#")]),e._v(" Oracle expdp导出数据")]),e._v(" "),s("p",[e._v("Oracle EXPDP导出数据\n上一章介绍了EXP导出数据，在数据量较大的情况下，由于导出的效率较低，所以EXPDP是Oracle 10g开始引入的数据泵技术，数据泵技术是在数据库之间或者在数据库与操作系统之间传输数据的工具。")]),e._v(" "),s("p",[e._v("EXPDP是数据泵导出的工具，它可以把数据库中的对象选择性的导出到操作系统中。比如：表、用户、表空间、数据库等。")]),e._v(" "),s("p",[e._v("使用EXPDP工具与EXP不同的是，在使用EXPDP时要先创建目录对象，通过这个对象就可以找到要备份数据的数据库服务器，并且使EXPDP工具备份出来的数据必须存放在目录对象对应的操作系统的目录中。")]),e._v(" "),s("p",[e._v("下面将分步讲解如何使用EXPDP导出数据：")]),e._v(" "),s("p",[e._v("1、创建目录对象：")]),e._v(" "),s("p",[e._v("创建目录对象是使用EXPDP工具进行导出的前提。")]),e._v(" "),s("p",[e._v("创建目录对象的语法如下:")]),e._v(" "),s("p",[e._v("CREATE DIRECTORY directoryname AS  'filename'\n语法解析：")]),e._v(" "),s("p",[e._v("（1）、directoryname:创建的目录名称。")]),e._v(" "),s("p",[e._v("（2）、filename:存放数据的文件夹名。")]),e._v(" "),s("p",[e._v("2、给使用目录的用户赋权限：")]),e._v(" "),s("p",[e._v("新创建的目录对象不是任何用户都可以使用的，只有拥有该目录使用权的用户才能使用，所以要为使用该目录的用户赋一个权限。笔者要导出的数据都在STUDENT(学生)用户下，那么赋权限的语句如下:")]),e._v(" "),s("p",[e._v("GRANT READ,WRITE ON DIRECTORY directoryname TO student\n这里，directoryname就是创建的目录名称。")]),e._v(" "),s("p",[e._v("案例1、创建目录对象dir并给student用户授予读写权限，代码如下：")]),e._v(" "),s("p",[e._v("--创建目录对象dir，数据文件存放的路径为d:/expdpdi\ncreate directory dir as 'd:/expdpdir';\n--给用户授予目录对象的读写权限\ngrant  read,write on directory dir to student ;")]),e._v(" "),s("p",[e._v("3、选择性导出数据库数据")]),e._v(" "),s("p",[e._v("前面已经创建好了目录，使用EXPDP工具导出数据的方法与EXP导出的方法类似，也是在DOS的命令窗口中实现的。")]),e._v(" "),s("p",[e._v("Oracle expdp导出表数据：")]),e._v(" "),s("p",[e._v("expdp student/123456@orcl dumpfile=student.dmp logfile=student.log tables= stuinfo directory=dir\n命令解析：")]),e._v(" "),s("p",[e._v("（1）、dumpfile指定导出的dmp文件的名字。")]),e._v(" "),s("p",[e._v("（2）、logfile指定导出时的日志文件的 名字。")]),e._v(" "),s("p",[e._v("（3）、tables指定备份的表结构，可以导出多个表，通过（table1，table2...,tablen）进行选择")]),e._v(" "),s("p",[e._v("（4）、directory指定导出的目录对象，目录对象中有对应的数据文件保存在哪个目录下。")]),e._v(" "),s("p",[e._v("结果如下：")]),e._v(" "),s("p",[e._v("oracle expdp导出")]),e._v(" "),s("p",[e._v("然后，发现在D:\\EXPDPDIR目录下已经生成了STUDENT.DMP的备份文件。")]),e._v(" "),s("p",[e._v("1548861364985_416926.png")]),e._v(" "),s("p",[e._v("Oracle expdp导出表数据（带条件）：")]),e._v(" "),s("p",[e._v("expdp student/123456@orcl dumpfile=student_1.dmp logfile=student_1.log tables= stuinfo directory=dir\nquery=\"'where sex=1'\"\nquery：指定要添加的条件，把表中的数据进行过滤导出")]),e._v(" "),s("p",[e._v("Oracle expdp导出表空间：")]),e._v(" "),s("p",[e._v("expdp student/123456@orcl dumpfile=student_tablespace.dmp logfile=student_tablespace.log\ntablespaces=(student)  directory=dir\ntablespaces：指定要导出的表空间的名字。")]),e._v(" "),s("p",[e._v("Oracle expdp导出用户：")]),e._v(" "),s("p",[e._v("expdp student/123456@orcl dumpfile=student_user.dmp logfile=student_user.log\nowner=(student)  directory=dir\nowner：指定要导出的用户，前提条件是具有该用户的操作权限")]),e._v(" "),s("p",[e._v("Oracle expdp导出整个库：")]),e._v(" "),s("p",[e._v("expdp student/123456@orcl dumpfile=full.dmp logfile=full.log\nfull=y  directory=dir\nfull=y指的是导出整个数据库，前提是该用户具有管理员权限。")]),e._v(" "),s("h2",{attrs:{id:"关于读取oracle数据库小数点前面0不显示问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于读取oracle数据库小数点前面0不显示问题"}},[e._v("#")]),e._v(" 关于读取Oracle数据库小数点前面0不显示问题")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("to_char(af.Cash,'fm9999990.999999') as Cash,\n\n含义：\n①其9代表：如果存在数字则显示数字，不存在则显示空格\n②其0代表：如果存在数字则显示数字，不存在则显示0，即占位符。\n③其FM代表：删除如果是因9带来的空格，则删除之\n")])])]),s("h2",{attrs:{id:"sqldeveloper的安装及其使用教程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sqldeveloper的安装及其使用教程"}},[e._v("#")]),e._v(" sqldeveloper的安装及其使用教程")]),e._v(" "),s("p",[e._v("1.安装\n下载地址：http://www.oracle.com/technetwork/developer-tools/sql-developer/downloads/index-098778.html")]),e._v(" "),s("p",[e._v("解压之后，运行目录下面的文件即可。")]),e._v(" "),s("p",[e._v("sqldeveloper是基于jdbc的，所以需要创建连接。")]),e._v(" "),s("p",[e._v("打开SQL工作表：工具--\x3eSQL工作表  或者使用快捷键Alt+F10")]),e._v(" "),s("p",[e._v("选择连接")]),e._v(" "),s("p",[e._v("2.连接Oracle数据库及其使用")]),e._v(" "),s("p",[e._v("比如输入一个1")]),e._v(" "),s("p",[e._v("3 连接MySQL数据库及其使用")]),e._v(" "),s("p",[e._v("完成之后，点击新建连接，里面就可以看到MySQL数据库了。需要连接其它数据库也是一样，添加jdbc驱动就可以了。")]),e._v(" "),s("p",[e._v("然后点击连接")]),e._v(" "),s("p",[e._v("查看当前正在使用得数据库")]),e._v(" "),s("p",[e._v("执行查询")]),e._v(" "),s("p",[e._v("4 PL/SQL文档的查看\n本地离线文档")]),e._v(" "),s("p",[e._v("在线文档\n网址：https://docs.oracle.com/pls/db102/homepage。操作和上面一样。")]),e._v(" "),s("p",[e._v("使用命令查看程序包\ndesc 程序包的名字")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("SQL> desc dbms_output\nPROCEDURE DISABLE\nPROCEDURE ENABLE\n Argument Name                  Type                    In/Out Default?\n ------------------------------ ----------------------- ------ --------\n BUFFER_SIZE                    NUMBER(38)              IN     DEFAULT\nPROCEDURE GET_LINE\n Argument Name                  Type                    In/Out Default?\n ------------------------------ ----------------------- ------ --------\n LINE                           VARCHAR2                OUT\n STATUS                         NUMBER(38)              OUT\nPROCEDURE GET_LINES\n Argument Name                  Type                    In/Out Default?\n ------------------------------ ----------------------- ------ --------\n LINES                          TABLE OF VARCHAR2(32767) OUT\n NUMLINES                       NUMBER(38)              IN/OUT\nPROCEDURE GET_LINES\n Argument Name                  Type                    In/Out Default?\n ------------------------------ ----------------------- ------ --------\n LINES                          DBMSOUTPUT_LINESARRAY   OUT\n NUMLINES                       NUMBER(38)              IN/OUT\nPROCEDURE NEW_LINE\nPROCEDURE PUT\n Argument Name                  Type                    In/Out Default?\n ------------------------------ ----------------------- ------ --------\n A                              VARCHAR2                IN\nPROCEDURE PUT_LINE\n Argument Name                  Type                    In/Out Default?\n ------------------------------ ----------------------- ------ --------\n A                              VARCHAR2                IN\n")])])]),s("h2",{attrs:{id:"sqlyog详细使用教程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sqlyog详细使用教程"}},[e._v("#")]),e._v(" SQLyog详细使用教程")]),e._v(" "),s("p",[e._v("SQLyog是一款功能强大的mysql数据库管理工具，这篇文章为大家详细介绍SQLyog的使用方法！")]),e._v(" "),s("p",[e._v("SQLyog使用教程")]),e._v(" "),s("ol",[s("li",[e._v("如何创建数据库")])]),e._v(" "),s("p",[e._v("第一步，右键根结点->创建数据库。")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n第二步，填写数据库名称，选择默认字符集等后点确定即可。")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n2. 如何备份和还原数据库")]),e._v(" "),s("p",[e._v("2.1 备份数据库的步骤")]),e._v(" "),s("p",[e._v("第一步：右键要备份的数据库->备份/导出->备份数据库。")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n第二步，在SQL转储界面上根据自己需要进行设置。")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n1：可根据需要备份数据、结构或者两者。")]),e._v(" "),s("p",[e._v("2：选择备份文件存储的位置。")]),e._v(" "),s("p",[e._v("3：对自己要备份的内容进行勾选。")]),e._v(" "),s("p",[e._v("4：根据自己需要选择写入文件的内容，如Create Database，Use Database等语句。")]),e._v(" "),s("p",[e._v("第三步，点击导出即可。")]),e._v(" "),s("p",[e._v("2.2 还原数据库的步骤")]),e._v(" "),s("p",[e._v("第一步，右键要还原到的数据库->导入->执行SQL脚本。")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n第二步，在还原数据库界面选择以前备份好的文件。")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n第三步，点击‘执行’即可。")]),e._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[e._v("关于数据库表的一些操作")])]),e._v(" "),s("p",[e._v("3.1 备份表数据")]),e._v(" "),s("p",[e._v("右键选择某数据库下的表->备份表作为SQL转储。")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n以下步骤可以参考备份数据库的方法。")]),e._v(" "),s("p",[e._v("3.2 还原表数据 与还原数据库的步骤相同。")]),e._v(" "),s("p",[e._v("3.3 如何查看并修改表结构和索引")]),e._v(" "),s("p",[e._v("第一步，右键表->改变表，打开关于表的详细信息。")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n第二步，在打开的界面，修改表结构和索引等信息。比如，修改把索引属性修改为FULLTEXT的")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n4. 如何创建用户及授权用户对数据库操作")]),e._v(" "),s("p",[e._v("第一种方法：在SQLyog中添加用户并进行授权。")]),e._v(" "),s("p",[e._v("第一步，以root账户的身份创建新连接。")]),e._v(" "),s("p",[e._v("第二步，选择工具->用户管理。")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n第二步,填写用户名，选择主机localhost或%，输入密码，保存改动即可创建用户。")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n第三步，在第二步保存改动后右上角用户即相应的改为iyou@%或iyou@localhost(图中1);然后再选择要授权的数据库，比如是exjc6(图中2);接下来通过在具体操作前进行勾选给选择的数据库exjc6进行授予该操作的权利。")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n第二种方法：在命令窗口中进行创建用户和授权。 使用命令进行数据库授权步骤如下：")]),e._v(" "),s("p",[e._v("@>mysql–u root –p")]),e._v(" "),s("p",[e._v("mysql>grant all privileges on exjc6.* to iyou@’%’ (identified by PASSWORD(‘123’));")]),e._v(" "),s("p",[e._v("mysql>flush privileges;")]),e._v(" "),s("p",[e._v("说明： all表示所有权限(包括增、删、改、查等权限);")]),e._v(" "),s("p",[e._v("exjc6.*表示对exjc6数据库有所有操作权限， "),s("em",[e._v(".")]),e._v(" 表示对所有数据库有所有操作权限;")]),e._v(" "),s("p",[e._v("iyou为添加的用户名; 123为密码;")]),e._v(" "),s("p",[e._v("%为匹配的所有主机，即所有主机都可访问该exjc6数据库，localhost表示匹配本机;")]),e._v(" "),s("p",[e._v("执行完会在mysql.user表插入一条记录,并添加一个名为iyou的用户;")]),e._v(" "),s("p",[e._v("上面的信息可以指定如grant select,update on exjc6.* to iyou@localhost identified by '123\"。")]),e._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[e._v("如何比较两个数据库之间的的差别并进行同步")])]),e._v(" "),s("p",[e._v("第一步，选择高级工具->架构同步工具。")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n第二步，选择要比较的两个数据库，要修改的数据库放在右侧的目标源中。")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n第三步，根据需要可以选择仅比较表格或比较全部对象(表、函数、触发器、存储过程等)，然后单击比较，即可出现比较的结果。结果中通过具体颜色标注出创建或修改的对象，并在左下角显示出具体的内容。 第四步，点击执行所有，即可把右侧数据库同步成与左侧数据库结构相同的数据库。需要说明的是这种同步只包含表结构，不包含表数据。")]),e._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[e._v("SQLyog过期，如何破解")])]),e._v(" "),s("p",[e._v("我使用的是SQLyog 9.63，只有一个月的试用期，如何超过了试用期，怎么办? 在这时我可以告诉大家一个解决方案，那就是通过删除注册表项，再获得一个月的试用期。")]),e._v(" "),s("p",[e._v("具体的操作方法如下: 第一步，运行窗口中输入regedit，回车进入注册表编辑器。")]),e._v(" "),s("p",[e._v("第二步，按路径HKEY_CURRENT_USER->SoftWare找到红色标注的{8E919370-*}项。")]),e._v(" "),s("p",[e._v("SQLyog怎么用？SQLyog详细使用教程\n第三步，右键该项，选择删除，再点击是即可。")]),e._v(" "),s("h2",{attrs:{id:"oracle超长字符查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oracle超长字符查询"}},[e._v("#")]),e._v(" oracle超长字符查询")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('$sql = "select ID,REQUESTMETHOD,VERSION,APPID,ISCOMPANY,DATAFORMAT,TIMESTAMPNUMS,NONCENUMS,REQUESTDATA,SIGNSTR,REQUESTCODE,STATUS,RESULTINFO,CREATETIME,UPDATETIME,DELETEDMARK,\n          dbms_lob.substr(REQUESTDATAINFO,4000,1) piece1,\n  case when dbms_lob.getlength(REQUESTDATAINFO) > 4000 then dbms_lob.substr(REQUESTDATAINFO,4000,4001) end piece2,\n  case when dbms_lob.getlength(REQUESTDATAINFO) > 8000 then dbms_lob.substr(REQUESTDATAINFO,4000,8001) end piece3,\n  case when dbms_lob.getlength(REQUESTDATAINFO) > 12000 then dbms_lob.substr(REQUESTDATAINFO,4000,12001) end piece4,\n  case when dbms_lob.getlength(REQUESTDATAINFO) > 16000 then dbms_lob.substr(REQUESTDATAINFO,4000,16001) end piece5,\n  case when dbms_lob.getlength(REQUESTDATAINFO) > 20000 then dbms_lob.substr(REQUESTDATAINFO,4000,20001) end piece6,\n  case when dbms_lob.getlength(REQUESTDATAINFO) > 24000 then dbms_lob.substr(REQUESTDATAINFO,4000,24001) end piece7,\n  case when dbms_lob.getlength(REQUESTDATAINFO) > 28000 then dbms_lob.substr(REQUESTDATAINFO,4000,28001) end piece8\n    from attendancepush where DeletedMark=0 AND Status=0 ";\n')])])]),s("h2",{attrs:{id:"mysql-查询项目名称重复的项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql-查询项目名称重复的项目"}},[e._v("#")]),e._v(" mysql 查询项目名称重复的项目")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("select * from project where name in (select   name from   project where deletedmark = 0 group by   name having count(name) > 1);\n")])])]),s("h2",{attrs:{id:"mysql-查询今日的数据、近七天的数据、近30天的数据-以此类推"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql-查询今日的数据、近七天的数据、近30天的数据-以此类推"}},[e._v("#")]),e._v(" Mysql 查询今日的数据、近七天的数据、近30天的数据，以此类推")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("查询近七天的数据\nSELECT * FROM test_date where DATE_SUB(CURDATE(), INTERVAL 6 DAY) <= create_date\n查询近30天的数据：\nSELECT * FROM test_date where DATE_SUB(CURDATE(), INTERVAL 29 DAY) <= create_date;\n查询今天的数据：\nSELECT * FROM test_date where DATE_SUB(CURDATE(), INTERVAL 0 DAY) <= create_date\n")])])]),s("p",[e._v("DATE_SUB() 函数从日期减去指定的时间间隔。")]),e._v(" "),s("p",[e._v("DATE_SUB(date,INTERVAL expr type)，6表示截取的天数，最后的DAY表示按天来进行截取。")]),e._v(" "),s("p",[e._v("CURDATE()表示当前的系统时间（日期），另有CURTIME（）表示当前的系统时间（时分秒）。")]),e._v(" "),s("h2",{attrs:{id:"mysql查找数据库中是否已经存在某张表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql查找数据库中是否已经存在某张表"}},[e._v("#")]),e._v(" mysql查找数据库中是否已经存在某张表")]),e._v(" "),s("p",[e._v('select count(*) from information_schema.TABLES t where t.TABLE_SCHEMA ="数据库名" and t.TABLE_NAME ="数据库表名";')]),e._v(" "),s("p",[e._v("##　mysql导入导出数据")]),e._v(" "),s("p",[s("strong",[e._v("导出数据库")])]),e._v(" "),s("ul",[s("li",[e._v("导出完整数据：表结构+数据")])]),e._v(" "),s("p",[s("code",[e._v("mysqldump -u用户名 -p 数据库名 > 数据库名.sql")])]),e._v(" "),s("p",[s("code",[e._v("# /usr/local/mysql/bin/mysqldump -uroot -p abc > abc.sql")])]),e._v(" "),s("ul",[s("li",[e._v("只导出表结构")])]),e._v(" "),s("p",[s("code",[e._v("mysqldump -u用户名 -p -d 数据库名 > 数据库名.sql")])]),e._v(" "),s("p",[s("code",[e._v("#/usr/local/mysql/bin/mysqldump -uroot -p -d abc > abc.sql")])]),e._v(" "),s("p",[s("strong",[e._v("导入数据库")])]),e._v(" "),s("ul",[s("li",[e._v("使用 mysql 命令导入")])]),e._v(" "),s("p",[s("code",[e._v("mysql -u用户名 -p 数据库名 < 数据库名.sql")])]),e._v(" "),s("p",[s("code",[e._v("# mysql -uroot -p123456 < abc.sql")])]),e._v(" "),s("ul",[s("li",[e._v("使用 source 命令导入")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mysql> create database abc;      # 创建数据库\nmysql> use abc;                  # 使用已创建的数据库 \nmysql> set names utf8;           # 设置编码\nmysql> source /home/abc/abc.sql  # 导入备份数据库\n")])])])],1)}),[],!1,null,null,null);n.default=a.exports}}]);